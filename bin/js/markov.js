// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
(function () { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var List = function() {
	this.length = 0;
};
List.__name__ = true;
List.prototype = {
	add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,isEmpty: function() {
		return this.h == null;
	}
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
_$List_ListNode.__name__ = true;
var ID = function() { };
ID.__name__ = true;
var TrainingDatas = function() { };
TrainingDatas.__name__ = true;
var _$Main_TrainingData = function(value,displayName,data) {
	this.value = value;
	this.displayName = displayName;
	this.data = data;
};
_$Main_TrainingData.__name__ = true;
var _$Main_CustomQueryStringOption = { __ename__ : true, __constructs__ : ["EVERYTHING","NO_TRAINING_DATA"] };
_$Main_CustomQueryStringOption.EVERYTHING = ["EVERYTHING",0];
_$Main_CustomQueryStringOption.EVERYTHING.__enum__ = _$Main_CustomQueryStringOption;
_$Main_CustomQueryStringOption.NO_TRAINING_DATA = ["NO_TRAINING_DATA",1];
_$Main_CustomQueryStringOption.NO_TRAINING_DATA.__enum__ = _$Main_CustomQueryStringOption;
var Main = function() {
	this.lastNames = [];
	this.shareLinkTextEdit = window.document.getElementById("shareedit");
	this.shareResultsOnlyElement = window.document.getElementById("shareresultsonly");
	this.shareResultsAndSettingsElement = window.document.getElementById("shareresultsandsettings");
	this.similarElement = window.document.getElementById("similar");
	this.excludesElement = window.document.getElementById("excludes");
	this.includesElement = window.document.getElementById("includes");
	this.endsWithElement = window.document.getElementById("endswith");
	this.startsWithElement = window.document.getElementById("startswith");
	this.lengthElement = window.document.getElementById("minmaxlength");
	this.namesTitleElement = window.document.getElementById("namestitle");
	this.randomThemeElement = window.document.getElementById("random");
	this.generateElement = window.document.getElementById("generate");
	this.currentNamesElement = window.document.getElementById("currentname");
	this.noNamesFoundElement = window.document.getElementById("nonamesfound");
	this.maxProcessingTimeElement = window.document.getElementById("maxtime");
	this.maxWordsToGenerateElement = window.document.getElementById("maxwordstogenerate");
	this.priorElement = window.document.getElementById("prior");
	this.orderElement = window.document.getElementById("order");
	this.trainingDataTextEdit = window.document.getElementById("trainingdataedit");
	this.nameDataDataListElement = window.document.getElementById("namedatapresetslist");
	this.nameDataSearchBoxElement = window.document.getElementById("trainingdatasearchbox");
	this.nameDataPresetListElement = window.document.getElementById("trainingdatalist");
	this.trainingData = [];
	var _g = 0;
	var _g1 = Type.getClassFields(TrainingDatas);
	while(_g < _g1.length) {
		var name = _g1[_g];
		++_g;
		var data = Reflect.field(TrainingDatas,name);
		this.trainingData.push(new _$Main_TrainingData(name,name,data));
	}
	var params = window.location.search.substring(1);
	if(!(params == null || params == "")) {
		this.trainingData.push(new _$Main_TrainingData("Custom","Custom",[]));
	}
	window.onload = $bind(this,this.onWindowLoaded);
};
Main.__name__ = true;
Main.getElement = function(id) {
	return window.document.getElementById(id);
};
Main.main = function() {
	var main = new Main();
};
Main.prototype = {
	addTrainingData: function(displayName,data) {
		this.trainingData.push(new _$Main_TrainingData(displayName,displayName,data));
	}
	,onWindowLoaded: function() {
		this.trainingData.sort(function(a,b) {
			var left = a.displayName.toLowerCase();
			var right = b.displayName.toLowerCase();
			if(left < right) {
				return -1;
			}
			if(left > right) {
				return 1;
			}
			return 0;
		});
		this.trainingDataTopicTrie = new markov_util_PrefixTrie();
		var _g = 0;
		var _g1 = this.trainingData;
		while(_g < _g1.length) {
			var data = [_g1[_g]];
			++_g;
			var makeOption = (function(data1) {
				return function() {
					var option = window.document.createElement("option");
					option.appendChild(window.document.createTextNode(data1[0].displayName));
					option.value = data1[0].value;
					return option;
				};
			})(data);
			this.nameDataPresetListElement.appendChild(makeOption());
			this.nameDataDataListElement.appendChild(makeOption());
			this.trainingDataTopicTrie.insert(data[0].displayName);
		}
		this.set_trainingDataKey("AbÃ¼lski");
		this.maxWordsToGenerate = 200;
		this.minLength = 2;
		this.maxLength = 15;
		this.order = 2;
		this.prior = 0.0;
		this.maxProcessingTime = 1800;
		this.set_startsWith("");
		this.set_endsWith("");
		this.set_includes("");
		this.set_excludes("");
		this.set_similar("");
		var params = window.location.search.substring(1);
		if(!(params == null || params == "")) {
			var params1 = window.location.search.substring(1);
			var splitParams = params1.split("&");
			var customTrainingData = [];
			var sharedResultData = [];
			var _g2 = 0;
			while(_g2 < splitParams.length) {
				var param = splitParams[_g2];
				++_g2;
				var kv = param.split("=");
				if(kv.length < 2) {
					continue;
				}
				var k = decodeURIComponent(kv[0].split("+").join(" "));
				var v = decodeURIComponent(kv[1].split("+").join(" "));
				switch(k) {
				case "ends_width":
					this.set_endsWith(v);
					break;
				case "excludes":
					this.set_excludes(v);
					break;
				case "includes":
					this.set_includes(v);
					break;
				case "length_range_max":
					this.maxLength = Std.parseInt(v);
					break;
				case "length_range_min":
					this.minLength = Std.parseInt(v);
					break;
				case "max_processing_time":
					this.maxProcessingTime = Std.parseInt(v);
					break;
				case "max_words":
					this.maxWordsToGenerate = Std.parseInt(v);
					break;
				case "order":
					this.order = Std.parseInt(v);
					break;
				case "prior":
					this.prior = parseFloat(v);
					break;
				case "r":
					sharedResultData.push(v);
					break;
				case "similar_to":
					this.set_similar(v);
					break;
				case "starts_with":
					this.set_startsWith(v);
					break;
				case "w":
					customTrainingData.push(v);
					break;
				}
			}
			if(sharedResultData.length > 0) {
				this.lastNames = sharedResultData;
				var names = this.lastNames;
				var _gthis = this;
				this.lastNames = names;
				if(this.get_similar().length > 0) {
					names.sort(function(x,y) {
						var target = _gthis.get_similar();
						if(!(x != null)) {
							throw new js__$Boot_HaxeError("FAIL: source != null");
						}
						if(!(target != null)) {
							throw new js__$Boot_HaxeError("FAIL: target != null");
						}
						var xSimilarity;
						if(x.length == 0) {
							xSimilarity = target.length;
						} else if(target.length == 0) {
							xSimilarity = x.length;
						} else {
							var table = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(x,target,true);
							xSimilarity = table[table.length - 1];
						}
						var target1 = _gthis.get_similar();
						if(!(y != null)) {
							throw new js__$Boot_HaxeError("FAIL: source != null");
						}
						if(!(target1 != null)) {
							throw new js__$Boot_HaxeError("FAIL: target != null");
						}
						var ySimilarity;
						if(y.length == 0) {
							ySimilarity = target1.length;
						} else if(target1.length == 0) {
							ySimilarity = y.length;
						} else {
							var table1 = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(y,target1,true);
							ySimilarity = table1[table1.length - 1];
						}
						if(xSimilarity > ySimilarity) {
							return 1;
						} else if(xSimilarity < ySimilarity) {
							return -1;
						} else {
							return 0;
						}
					});
				}
				this.noNamesFoundElement.innerHTML = "";
				this.currentNamesElement.innerHTML = "";
				if(names.length == 0) {
					this.noNamesFoundElement.textContent = "No names found, try again or change the name generation settings.";
				}
				var _g3 = 0;
				while(_g3 < names.length) {
					var name = names[_g3];
					++_g3;
					var li = window.document.createElement("li");
					if(!(name != null)) {
						throw new js__$Boot_HaxeError("FAIL: str != null");
					}
					//li.textContent = HxOverrides.substr(name,0,1).toUpperCase() + HxOverrides.substr(name,1,name.length - 1);
					//li.textContent = name;
					//this.currentNamesElement.appendChild(li);
          this.currentNamesElement.innerHTML += name + " ";
				}
			}
			if(customTrainingData.length > 3) {
				var data2 = this.getTrainingDataForKey("Custom");
				data2.data = customTrainingData;
				this.set_trainingDataKey("Custom");
			}
		}
		var _gthis1 = this;
		noUiSlider.create(this.orderElement,{ start : [this.order], connect : "lower", range : { "min" : [1,1], "max" : [9]}, pips : { mode : "range", density : 10}});
		this.createTooltips(this.orderElement);
		this.orderElement.noUiSlider.on("change",function(values,handle,rawValues) {
			_gthis1.order = values[handle] | 0;
		});
		this.orderElement.noUiSlider.on("update",function(values1,handle1,rawValues1) {
			_gthis1.updateTooltips(_gthis1.orderElement,handle1,values1[handle1] | 0);
		});
		noUiSlider.create(this.priorElement,{ start : [this.prior], connect : "lower", range : { "min" : 0.001, "50%" : 0.025, "max" : 0.05}, pips : { mode : "range", density : 10, format : new wNumb({ decimals : 3})}});
		this.createTooltips(this.priorElement);
		this.priorElement.noUiSlider.on("change",function(values2,handle2,rawValues2) {
			_gthis1.prior = parseFloat(values2[handle2]);
		});
		this.priorElement.noUiSlider.on("update",function(values3,handle3,rawValues3) {
			_gthis1.updateTooltips(_gthis1.priorElement,handle3,values3[handle3]);
		});
		noUiSlider.create(this.maxWordsToGenerateElement,{ start : [100], connect : "lower", range : { "min" : 20, "max" : 1000}, pips : { mode : "range", density : 10, format : new wNumb({ decimals : 0})}});
		this.createTooltips(this.maxWordsToGenerateElement);
		this.maxWordsToGenerateElement.noUiSlider.on("change",function(values4,handle4,rawValues4) {
			_gthis1.maxWordsToGenerate = parseFloat(values4[handle4]);
		});
		this.maxWordsToGenerateElement.noUiSlider.on("update",function(values5,handle5,rawValues5) {
			_gthis1.updateTooltips(_gthis1.maxWordsToGenerateElement,handle5,values5[handle5] | 0);
		});
		noUiSlider.create(this.maxProcessingTimeElement,{ start : [this.maxProcessingTime], connect : "lower", range : { "min" : 50, "max" : 5000}, pips : { mode : "range", density : 10, format : new wNumb({ decimals : 0})}});
		this.createTooltips(this.maxProcessingTimeElement);
		this.maxProcessingTimeElement.noUiSlider.on("change",function(values6,handle6,rawValues6) {
			_gthis1.maxProcessingTime = parseFloat(values6[handle6]);
		});
		this.maxProcessingTimeElement.noUiSlider.on("update",function(values7,handle7,rawValues7) {
			_gthis1.updateTooltips(_gthis1.maxProcessingTimeElement,handle7,values7[handle7] | 0);
		});
		noUiSlider.create(this.lengthElement,{ start : [this.minLength,this.maxLength], connect : true, range : { "min" : [3,1], "max" : 21}, pips : { mode : "range", density : 10}});
		this.createTooltips(this.lengthElement);
		this.lengthElement.noUiSlider.on("change",function(values8,handle8,rawValues8) {
			if(handle8 == 0) {
				_gthis1.minLength = values8[handle8] | 0;
			} else if(handle8 == 1) {
				_gthis1.maxLength = values8[handle8] | 0;
			}
		});
		this.lengthElement.noUiSlider.on("update",function(values9,handle9,rawValues9) {
			_gthis1.updateTooltips(_gthis1.lengthElement,handle9,values9[handle9] | 0);
		});
		var _gthis2 = this;
		this.nameDataPresetListElement.addEventListener("change",function() {
			_gthis2.set_trainingDataKey(_gthis2.nameDataPresetListElement.value);
		},false);
		this.nameDataSearchBoxElement.addEventListener("change",function() {
			if(_gthis2.trainingDataTopicTrie.find(_gthis2.nameDataSearchBoxElement.value)) {
				_gthis2.set_trainingDataKey(_gthis2.nameDataSearchBoxElement.value);
			}
		},false);
		this.nameDataSearchBoxElement.addEventListener("input",function() {
			if(_gthis2.trainingDataTopicTrie.find(_gthis2.nameDataSearchBoxElement.value)) {
				_gthis2.set_trainingDataKey(_gthis2.nameDataSearchBoxElement.value);
			}
		},false);
		this.trainingDataTextEdit.addEventListener("change",function() {
			var data3 = _gthis2.trainingDataTextEdit.value;
			if(!(data3 == null || data3.length == 0)) {
				var arr = data3.split(" ");
				if(arr.length > 0) {
					var presetName = _gthis2.get_trainingDataKey();
					_gthis2.namesTitleElement.innerHTML = presetName;
					_gthis2.duplicateTrie = new markov_util_PrefixTrie();
					var _g4 = 0;
					while(_g4 < arr.length) {
						var name1 = arr[_g4];
						++_g4;
						_gthis2.duplicateTrie.insert(name1);
					}
					_gthis2.generator = new markov_namegen_NameGenerator(arr,_gthis2.order,_gthis2.prior);
					var names1 = [];
					var startTime = new Date().getTime();
					var currentTime = new Date().getTime();
					while(names1.length < _gthis2.maxWordsToGenerate && currentTime < startTime + _gthis2.maxProcessingTime) {
						var name2 = _gthis2.generator.generateName(_gthis2.minLength,_gthis2.maxLength,_gthis2.get_startsWith(),_gthis2.get_endsWith(),_gthis2.get_includes(),_gthis2.get_excludes());
						if(name2 != null && !_gthis2.duplicateTrie.find(name2)) {
							names1.push(name2);
							_gthis2.duplicateTrie.insert(name2);
						}
						currentTime = new Date().getTime();
					}
					var _gthis3 = _gthis2;
					_gthis2.lastNames = names1;
					if(_gthis2.get_similar().length > 0) {
						names1.sort(function(x1,y1) {
							var target2 = _gthis3.get_similar();
							if(!(x1 != null)) {
								throw new js__$Boot_HaxeError("FAIL: source != null");
							}
							if(!(target2 != null)) {
								throw new js__$Boot_HaxeError("FAIL: target != null");
							}
							var xSimilarity1;
							if(x1.length == 0) {
								xSimilarity1 = target2.length;
							} else if(target2.length == 0) {
								xSimilarity1 = x1.length;
							} else {
								var table2 = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(x1,target2,true);
								xSimilarity1 = table2[table2.length - 1];
							}
							var target3 = _gthis3.get_similar();
							if(!(y1 != null)) {
								throw new js__$Boot_HaxeError("FAIL: source != null");
							}
							if(!(target3 != null)) {
								throw new js__$Boot_HaxeError("FAIL: target != null");
							}
							var ySimilarity1;
							if(y1.length == 0) {
								ySimilarity1 = target3.length;
							} else if(target3.length == 0) {
								ySimilarity1 = y1.length;
							} else {
								var table3 = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(y1,target3,true);
								ySimilarity1 = table3[table3.length - 1];
							}
							if(xSimilarity1 > ySimilarity1) {
								return 1;
							} else if(xSimilarity1 < ySimilarity1) {
								return -1;
							} else {
								return 0;
							}
						});
					}
					_gthis2.noNamesFoundElement.innerHTML = "";
					_gthis2.currentNamesElement.innerHTML = "";
					if(names1.length == 0) {
						_gthis2.noNamesFoundElement.textContent = "No names found, try again or change the name generation settings.";
					}
					var _g5 = 0;
					while(_g5 < names1.length) {
						var name3 = names1[_g5];
						++_g5;
						var li1 = window.document.createElement("li");
						if(!(name3 != null)) {
							throw new js__$Boot_HaxeError("FAIL: str != null");
						}
						//li1.textContent = HxOverrides.substr(name3,0,1).toUpperCase() + HxOverrides.substr(name3,1,name3.length - 1);
//						li1.textContent = name3;
//						_gthis2.currentNamesElement.appendChild(li1);
					_gthis2.currentNamesElement.innerHTML += name3 +" ";
					}
				}
			}
		},false);
		this.generateElement.addEventListener("click",function() {
			var data4 = _gthis2.trainingDataTextEdit.value;
			if(!(data4 == null || data4.length == 0)) {
				var arr1 = data4.split(" ");
				if(arr1.length > 0) {
					var presetName1 = _gthis2.get_trainingDataKey();
					_gthis2.namesTitleElement.innerHTML = presetName1;
					_gthis2.duplicateTrie = new markov_util_PrefixTrie();
					var _g6 = 0;
					while(_g6 < arr1.length) {
						var name4 = arr1[_g6];
						++_g6;
						_gthis2.duplicateTrie.insert(name4);
					}
					_gthis2.generator = new markov_namegen_NameGenerator(arr1,_gthis2.order,_gthis2.prior);
					var names2 = [];
					var startTime1 = new Date().getTime();
					var currentTime1 = new Date().getTime();
					while(names2.length < _gthis2.maxWordsToGenerate && currentTime1 < startTime1 + _gthis2.maxProcessingTime) {
						var name5 = _gthis2.generator.generateName(_gthis2.minLength,_gthis2.maxLength,_gthis2.get_startsWith(),_gthis2.get_endsWith(),_gthis2.get_includes(),_gthis2.get_excludes());
						if(name5 != null && !_gthis2.duplicateTrie.find(name5)) {
							names2.push(name5);
							_gthis2.duplicateTrie.insert(name5);
						}
						currentTime1 = new Date().getTime();
					}
					var _gthis4 = _gthis2;
					_gthis2.lastNames = names2;
					if(_gthis2.get_similar().length > 0) {
						names2.sort(function(x2,y2) {
							var target4 = _gthis4.get_similar();
							if(!(x2 != null)) {
								throw new js__$Boot_HaxeError("FAIL: source != null");
							}
							if(!(target4 != null)) {
								throw new js__$Boot_HaxeError("FAIL: target != null");
							}
							var xSimilarity2;
							if(x2.length == 0) {
								xSimilarity2 = target4.length;
							} else if(target4.length == 0) {
								xSimilarity2 = x2.length;
							} else {
								var table4 = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(x2,target4,true);
								xSimilarity2 = table4[table4.length - 1];
							}
							var target5 = _gthis4.get_similar();
							if(!(y2 != null)) {
								throw new js__$Boot_HaxeError("FAIL: source != null");
							}
							if(!(target5 != null)) {
								throw new js__$Boot_HaxeError("FAIL: target != null");
							}
							var ySimilarity2;
							if(y2.length == 0) {
								ySimilarity2 = target5.length;
							} else if(target5.length == 0) {
								ySimilarity2 = y2.length;
							} else {
								var table5 = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(y2,target5,true);
								ySimilarity2 = table5[table5.length - 1];
							}
							if(xSimilarity2 > ySimilarity2) {
								return 1;
							} else if(xSimilarity2 < ySimilarity2) {
								return -1;
							} else {
								return 0;
							}
						});
					}
					_gthis2.noNamesFoundElement.innerHTML = "";
					_gthis2.currentNamesElement.innerHTML = "";
					if(names2.length == 0) {
						_gthis2.noNamesFoundElement.textContent = "No names found, try again or change the name generation settings.";
					}
					var _g7 = 0;
					while(_g7 < names2.length) {
						var name6 = names2[_g7];
						++_g7;
						var li2 = window.document.createElement("li");
						if(!(name6 != null)) {
							throw new js__$Boot_HaxeError("FAIL: str != null");
						}
						//li2.textContent = HxOverrides.substr(name6,0,1).toUpperCase() + HxOverrides.substr(name6,1,name6.length - 1);
//						li2.textContent = name6;
//						_gthis2.currentNamesElement.appendChild(li2);
					_gthis2.currentNamesElement.innerHTML += name6 + " ";
					}
				}
			}
		},false);
		this.randomThemeElement.addEventListener("click",function() {
			var topics = Type.getClassFields(TrainingDatas);
			var topic = topics[Std.random(topics.length)];
			_gthis2.set_trainingDataKey(topic);
			var data5 = _gthis2.trainingDataTextEdit.value;
			if(!(data5 == null || data5.length == 0)) {
				var arr2 = data5.split(" ");
				if(arr2.length > 0) {
					var presetName2 = _gthis2.get_trainingDataKey();
					_gthis2.namesTitleElement.innerHTML = presetName2;
					_gthis2.duplicateTrie = new markov_util_PrefixTrie();
					var _g8 = 0;
					while(_g8 < arr2.length) {
						var name7 = arr2[_g8];
						++_g8;
						_gthis2.duplicateTrie.insert(name7);
					}
					_gthis2.generator = new markov_namegen_NameGenerator(arr2,_gthis2.order,_gthis2.prior);
					var names3 = [];
					var startTime2 = new Date().getTime();
					var currentTime2 = new Date().getTime();
					while(names3.length < _gthis2.maxWordsToGenerate && currentTime2 < startTime2 + _gthis2.maxProcessingTime) {
						var name8 = _gthis2.generator.generateName(_gthis2.minLength,_gthis2.maxLength,_gthis2.get_startsWith(),_gthis2.get_endsWith(),_gthis2.get_includes(),_gthis2.get_excludes());
						if(name8 != null && !_gthis2.duplicateTrie.find(name8)) {
							names3.push(name8);
							_gthis2.duplicateTrie.insert(name8);
						}
						currentTime2 = new Date().getTime();
					}
					var _gthis5 = _gthis2;
					_gthis2.lastNames = names3;
					if(_gthis2.get_similar().length > 0) {
						names3.sort(function(x3,y3) {
							var target6 = _gthis5.get_similar();
							if(!(x3 != null)) {
								throw new js__$Boot_HaxeError("FAIL: source != null");
							}
							if(!(target6 != null)) {
								throw new js__$Boot_HaxeError("FAIL: target != null");
							}
							var xSimilarity3;
							if(x3.length == 0) {
								xSimilarity3 = target6.length;
							} else if(target6.length == 0) {
								xSimilarity3 = x3.length;
							} else {
								var table6 = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(x3,target6,true);
								xSimilarity3 = table6[table6.length - 1];
							}
							var target7 = _gthis5.get_similar();
							if(!(y3 != null)) {
								throw new js__$Boot_HaxeError("FAIL: source != null");
							}
							if(!(target7 != null)) {
								throw new js__$Boot_HaxeError("FAIL: target != null");
							}
							var ySimilarity3;
							if(y3.length == 0) {
								ySimilarity3 = target7.length;
							} else if(target7.length == 0) {
								ySimilarity3 = y3.length;
							} else {
								var table7 = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(y3,target7,true);
								ySimilarity3 = table7[table7.length - 1];
							}
							if(xSimilarity3 > ySimilarity3) {
								return 1;
							} else if(xSimilarity3 < ySimilarity3) {
								return -1;
							} else {
								return 0;
							}
						});
					}
					_gthis2.noNamesFoundElement.innerHTML = "";
					_gthis2.currentNamesElement.innerHTML = "";
					if(names3.length == 0) {
						_gthis2.noNamesFoundElement.textContent = "No names found, try again or change the name generation settings.";
					}
					var _g9 = 0;
					while(_g9 < names3.length) {
						var name9 = names3[_g9];
						++_g9;
						var li3 = window.document.createElement("li");
						if(!(name9 != null)) {
							throw new js__$Boot_HaxeError("FAIL: str != null");
						}
						//li3.textContent = HxOverrides.substr(name9,0,1).toUpperCase() + HxOverrides.substr(name9,1,name9.length - 1);
//						li3.textContent = name9;
//						_gthis2.currentNamesElement.appendChild(li3);
						_gthis2.currentNamesElement.innerHTML +=name9 +" ";
					}
				}
			}
		},false);
		this.startsWithElement.addEventListener("change",function() {
			if(_gthis2.startsWithElement.value != null) {
				var tmp = _gthis2.startsWithElement.value.toLowerCase();
				_gthis2.set_startsWith(tmp);
			}
		},false);
		this.endsWithElement.addEventListener("change",function() {
			if(_gthis2.endsWithElement.value != null) {
				var tmp1 = _gthis2.endsWithElement.value.toLowerCase();
				_gthis2.set_endsWith(tmp1);
			}
		},false);
		this.includesElement.addEventListener("change",function() {
			if(_gthis2.includesElement.value != null) {
				var tmp2 = _gthis2.includesElement.value.toLowerCase();
				_gthis2.set_includes(tmp2);
			}
		},false);
		this.excludesElement.addEventListener("change",function() {
			if(_gthis2.excludesElement.value != null) {
				var tmp3 = _gthis2.excludesElement.value.toLowerCase();
				_gthis2.set_excludes(tmp3);
			}
		},false);
		this.similarElement.addEventListener("change",function() {
			if(_gthis2.similarElement.value != null) {
				var tmp4 = _gthis2.similarElement.value.toLowerCase();
				_gthis2.set_similar(tmp4);
			}
		},false);
		this.shareResultsAndSettingsElement.addEventListener("click",function() {
			_gthis2.shareLinkTextEdit.value = _gthis2.makeCustomQueryString(_$Main_CustomQueryStringOption.EVERYTHING);
			_gthis2.shareLinkTextEdit.style.display = "block";
		},false);
		this.shareResultsOnlyElement.addEventListener("click",function() {
			_gthis2.shareLinkTextEdit.value = _gthis2.makeCustomQueryString(_$Main_CustomQueryStringOption.NO_TRAINING_DATA);
			_gthis2.shareLinkTextEdit.style.display = "block";
		},false);
	}
	,buildTrainingDataList: function() {
		this.trainingData.sort(function(a,b) {
			var left = a.displayName.toLowerCase();
			var right = b.displayName.toLowerCase();
			if(left < right) {
				return -1;
			}
			if(left > right) {
				return 1;
			}
			return 0;
		});
		this.trainingDataTopicTrie = new markov_util_PrefixTrie();
		var _g = 0;
		var _g1 = this.trainingData;
		while(_g < _g1.length) {
			var data = [_g1[_g]];
			++_g;
			var makeOption = (function(data1) {
				return function() {
					var option = window.document.createElement("option");
					option.appendChild(window.document.createTextNode(data1[0].displayName));
					option.value = data1[0].value;
					return option;
				};
			})(data);
			this.nameDataPresetListElement.appendChild(makeOption());
			this.nameDataDataListElement.appendChild(makeOption());
			this.trainingDataTopicTrie.insert(data[0].displayName);
		}
	}
	,isQueryStringEmpty: function() {
		var params = window.location.search.substring(1);
		if(params == null || params == "") {
			return true;
		}
		return false;
	}
	,applySettings: function() {
		if(!Object.prototype.hasOwnProperty.call(TrainingDatas,"Animals")) {
			throw new js__$Boot_HaxeError("FAIL: Reflect.hasField(TrainingDatas, \"Animals\")");
		}
		this.set_trainingDataKey("Animals");
		this.maxWordsToGenerate = 100;
		this.minLength = 5;
		this.maxLength = 11;
		this.order = 3;
		this.prior = 0.0;
		this.maxProcessingTime = 800;
		this.set_startsWith("");
		this.set_endsWith("");
		this.set_includes("");
		this.set_excludes("");
		this.set_similar("");
		var params = window.location.search.substring(1);
		if(params == null || params == "") {
			return;
		}
		var params1 = window.location.search.substring(1);
		var splitParams = params1.split("&");
		var customTrainingData = [];
		var sharedResultData = [];
		var _g = 0;
		while(_g < splitParams.length) {
			var param = splitParams[_g];
			++_g;
			var kv = param.split("=");
			if(kv.length < 2) {
				continue;
			}
			var k = decodeURIComponent(kv[0].split("+").join(" "));
			var v = decodeURIComponent(kv[1].split("+").join(" "));
			switch(k) {
			case "ends_width":
				this.set_endsWith(v);
				break;
			case "excludes":
				this.set_excludes(v);
				break;
			case "includes":
				this.set_includes(v);
				break;
			case "length_range_max":
				this.maxLength = Std.parseInt(v);
				break;
			case "length_range_min":
				this.minLength = Std.parseInt(v);
				break;
			case "max_processing_time":
				this.maxProcessingTime = Std.parseInt(v);
				break;
			case "max_words":
				this.maxWordsToGenerate = Std.parseInt(v);
				break;
			case "order":
				this.order = Std.parseInt(v);
				break;
			case "prior":
				this.prior = parseFloat(v);
				break;
			case "r":
				sharedResultData.push(v);
				break;
			case "similar_to":
				this.set_similar(v);
				break;
			case "starts_with":
				this.set_startsWith(v);
				break;
			case "w":
				customTrainingData.push(v);
				break;
			}
		}
		if(sharedResultData.length > 0) {
			this.lastNames = sharedResultData;
			var names = this.lastNames;
			var _gthis = this;
			this.lastNames = names;
			if(this.get_similar().length > 0) {
				names.sort(function(x,y) {
					var target = _gthis.get_similar();
					if(!(x != null)) {
						throw new js__$Boot_HaxeError("FAIL: source != null");
					}
					if(!(target != null)) {
						throw new js__$Boot_HaxeError("FAIL: target != null");
					}
					var xSimilarity;
					if(x.length == 0) {
						xSimilarity = target.length;
					} else if(target.length == 0) {
						xSimilarity = x.length;
					} else {
						var table = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(x,target,true);
						xSimilarity = table[table.length - 1];
					}
					var target1 = _gthis.get_similar();
					if(!(y != null)) {
						throw new js__$Boot_HaxeError("FAIL: source != null");
					}
					if(!(target1 != null)) {
						throw new js__$Boot_HaxeError("FAIL: target != null");
					}
					var ySimilarity;
					if(y.length == 0) {
						ySimilarity = target1.length;
					} else if(target1.length == 0) {
						ySimilarity = y.length;
					} else {
						var table1 = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(y,target1,true);
						ySimilarity = table1[table1.length - 1];
					}
					if(xSimilarity > ySimilarity) {
						return 1;
					} else if(xSimilarity < ySimilarity) {
						return -1;
					} else {
						return 0;
					}
				});
			}
			this.noNamesFoundElement.innerHTML = "";
			this.currentNamesElement.innerHTML = "";
			if(names.length == 0) {
				this.noNamesFoundElement.textContent = "No names found, try again or change the name generation settings.";
			}
			var _g1 = 0;
			while(_g1 < names.length) {
				var name = names[_g1];
				++_g1;
				var li = window.document.createElement("li");
				if(!(name != null)) {
					throw new js__$Boot_HaxeError("FAIL: str != null");
				}
				//li.textContent = HxOverrides.substr(name,0,1).toUpperCase() + HxOverrides.substr(name,1,name.length - 1);
				li.textContent = name;
//				this.currentNamesElement.appendChild(li);
				this.currentNamesElement.innerHTML +=name +" ";
			}
		}
		if(customTrainingData.length > 3) {
			var data = this.getTrainingDataForKey("Custom");
			data.data = customTrainingData;
			this.set_trainingDataKey("Custom");
		}
	}
	,makeCustomQueryString: function(mode) {
		var s = "http://www.samcodes.co.uk/project/markov-namegen/";
		var appendKv = function(k,v,sep) {
			if(sep == null) {
				sep = "&";
			}
			if(k == null || k.length == 0 || v == null || v.length == 0) {
				return;
			}
			s += sep + encodeURIComponent(k) + "=" + encodeURIComponent(v);
		};
		appendKv("length_range_min",Std.string(this.minLength),"?");
		appendKv("length_range_max",Std.string(this.maxLength));
		appendKv("order",Std.string(this.order));
		appendKv("prior",Std.string(this.prior));
		appendKv("max_words",Std.string(this.maxWordsToGenerate));
		appendKv("max_processing_time",Std.string(this.maxProcessingTime));
		appendKv("starts_with",this.get_startsWith());
		appendKv("ends_width",this.get_endsWith());
		appendKv("includes",this.get_includes());
		appendKv("excludes",this.get_excludes());
		appendKv("similar_to",this.get_similar());
		if(mode != _$Main_CustomQueryStringOption.NO_TRAINING_DATA) {
			var data = this.trainingDataTextEdit.value.split(" ");
			if(data.length > 1) {
				var _g = 0;
				while(_g < data.length) {
					var word = data[_g];
					++_g;
					if(word != null && word.length != 0) {
						appendKv("w",word);
					}
				}
			}
		}
		if(this.lastNames.length > 0) {
			var _g1 = 0;
			var _g11 = this.lastNames;
			while(_g1 < _g11.length) {
				var name = _g11[_g1];
				++_g1;
				if(name != null && name.length != 0) {
					appendKv("r",name);
				}
			}
		}
		return s;
	}
	,createSliders: function() {
		var _gthis = this;
		noUiSlider.create(this.orderElement,{ start : [this.order], connect : "lower", range : { "min" : [1,1], "max" : [9]}, pips : { mode : "range", density : 10}});
		this.createTooltips(this.orderElement);
		this.orderElement.noUiSlider.on("change",function(values,handle,rawValues) {
			_gthis.order = values[handle] | 0;
		});
		this.orderElement.noUiSlider.on("update",function(values1,handle1,rawValues1) {
			_gthis.updateTooltips(_gthis.orderElement,handle1,values1[handle1] | 0);
		});
		noUiSlider.create(this.priorElement,{ start : [this.prior], connect : "lower", range : { "min" : 0.001, "50%" : 0.025, "max" : 0.05}, pips : { mode : "range", density : 10, format : new wNumb({ decimals : 3})}});
		this.createTooltips(this.priorElement);
		this.priorElement.noUiSlider.on("change",function(values2,handle2,rawValues2) {
			_gthis.prior = parseFloat(values2[handle2]);
		});
		this.priorElement.noUiSlider.on("update",function(values3,handle3,rawValues3) {
			_gthis.updateTooltips(_gthis.priorElement,handle3,values3[handle3]);
		});
		noUiSlider.create(this.maxWordsToGenerateElement,{ start : [100], connect : "lower", range : { "min" : 20, "max" : 1000}, pips : { mode : "range", density : 10, format : new wNumb({ decimals : 0})}});
		this.createTooltips(this.maxWordsToGenerateElement);
		this.maxWordsToGenerateElement.noUiSlider.on("change",function(values4,handle4,rawValues4) {
			_gthis.maxWordsToGenerate = parseFloat(values4[handle4]);
		});
		this.maxWordsToGenerateElement.noUiSlider.on("update",function(values5,handle5,rawValues5) {
			_gthis.updateTooltips(_gthis.maxWordsToGenerateElement,handle5,values5[handle5] | 0);
		});
		noUiSlider.create(this.maxProcessingTimeElement,{ start : [this.maxProcessingTime], connect : "lower", range : { "min" : 50, "max" : 5000}, pips : { mode : "range", density : 10, format : new wNumb({ decimals : 0})}});
		this.createTooltips(this.maxProcessingTimeElement);
		this.maxProcessingTimeElement.noUiSlider.on("change",function(values6,handle6,rawValues6) {
			_gthis.maxProcessingTime = parseFloat(values6[handle6]);
		});
		this.maxProcessingTimeElement.noUiSlider.on("update",function(values7,handle7,rawValues7) {
			_gthis.updateTooltips(_gthis.maxProcessingTimeElement,handle7,values7[handle7] | 0);
		});
		noUiSlider.create(this.lengthElement,{ start : [this.minLength,this.maxLength], connect : true, range : { "min" : [3,1], "max" : 21}, pips : { mode : "range", density : 10}});
		this.createTooltips(this.lengthElement);
		this.lengthElement.noUiSlider.on("change",function(values8,handle8,rawValues8) {
			if(handle8 == 0) {
				_gthis.minLength = values8[handle8] | 0;
			} else if(handle8 == 1) {
				_gthis.maxLength = values8[handle8] | 0;
			}
		});
		this.lengthElement.noUiSlider.on("update",function(values9,handle9,rawValues9) {
			_gthis.updateTooltips(_gthis.lengthElement,handle9,values9[handle9] | 0);
		});
	}
	,addEventListeners: function() {
		var _gthis = this;
		this.nameDataPresetListElement.addEventListener("change",function() {
			_gthis.set_trainingDataKey(_gthis.nameDataPresetListElement.value);
		},false);
		this.nameDataSearchBoxElement.addEventListener("change",function() {
			if(_gthis.trainingDataTopicTrie.find(_gthis.nameDataSearchBoxElement.value)) {
				_gthis.set_trainingDataKey(_gthis.nameDataSearchBoxElement.value);
			}
		},false);
		this.nameDataSearchBoxElement.addEventListener("input",function() {
			if(_gthis.trainingDataTopicTrie.find(_gthis.nameDataSearchBoxElement.value)) {
				_gthis.set_trainingDataKey(_gthis.nameDataSearchBoxElement.value);
			}
		},false);
		this.trainingDataTextEdit.addEventListener("change",function() {
			var data = _gthis.trainingDataTextEdit.value;
			if(!(data == null || data.length == 0)) {
				var arr = data.split(" ");
				if(arr.length > 0) {
					var presetName = _gthis.get_trainingDataKey();
					_gthis.namesTitleElement.innerHTML = presetName;
					_gthis.duplicateTrie = new markov_util_PrefixTrie();
					var _g = 0;
					while(_g < arr.length) {
						var name = arr[_g];
						++_g;
						_gthis.duplicateTrie.insert(name);
					}
					_gthis.generator = new markov_namegen_NameGenerator(arr,_gthis.order,_gthis.prior);
					var names = [];
					var startTime = new Date().getTime();
					var currentTime = new Date().getTime();
					while(names.length < _gthis.maxWordsToGenerate && currentTime < startTime + _gthis.maxProcessingTime) {
						var name1 = _gthis.generator.generateName(_gthis.minLength,_gthis.maxLength,_gthis.get_startsWith(),_gthis.get_endsWith(),_gthis.get_includes(),_gthis.get_excludes());
						if(name1 != null && !_gthis.duplicateTrie.find(name1)) {
							names.push(name1);
							_gthis.duplicateTrie.insert(name1);
						}
						currentTime = new Date().getTime();
					}
					var _gthis1 = _gthis;
					_gthis.lastNames = names;
					if(_gthis.get_similar().length > 0) {
						names.sort(function(x,y) {
							var target = _gthis1.get_similar();
							if(!(x != null)) {
								throw new js__$Boot_HaxeError("FAIL: source != null");
							}
							if(!(target != null)) {
								throw new js__$Boot_HaxeError("FAIL: target != null");
							}
							var xSimilarity;
							if(x.length == 0) {
								xSimilarity = target.length;
							} else if(target.length == 0) {
								xSimilarity = x.length;
							} else {
								var table = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(x,target,true);
								xSimilarity = table[table.length - 1];
							}
							var target1 = _gthis1.get_similar();
							if(!(y != null)) {
								throw new js__$Boot_HaxeError("FAIL: source != null");
							}
							if(!(target1 != null)) {
								throw new js__$Boot_HaxeError("FAIL: target != null");
							}
							var ySimilarity;
							if(y.length == 0) {
								ySimilarity = target1.length;
							} else if(target1.length == 0) {
								ySimilarity = y.length;
							} else {
								var table1 = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(y,target1,true);
								ySimilarity = table1[table1.length - 1];
							}
							if(xSimilarity > ySimilarity) {
								return 1;
							} else if(xSimilarity < ySimilarity) {
								return -1;
							} else {
								return 0;
							}
						});
					}
					_gthis.noNamesFoundElement.innerHTML = "";
					_gthis.currentNamesElement.innerHTML = "";
					if(names.length == 0) {
						_gthis.noNamesFoundElement.textContent = "No names found, try again or change the name generation settings.";
					}
					var _g1 = 0;
					while(_g1 < names.length) {
						var name2 = names[_g1];
						++_g1;
						var li = window.document.createElement("li");
						if(!(name2 != null)) {
							throw new js__$Boot_HaxeError("FAIL: str != null");
						}
						//li.textContent = HxOverrides.substr(name2,0,1).toUpperCase() + HxOverrides.substr(name2,1,name2.length - 1);
						//li.textContent = name2;
						_gthis.currentNamesElement.innerHTML +=name2 + " ";
						//_gthis.currentNamesElement.appendChild(li);
					}
				}
			}
		},false);
		this.generateElement.addEventListener("click",function() {
			var data1 = _gthis.trainingDataTextEdit.value;
			if(!(data1 == null || data1.length == 0)) {
				var arr1 = data1.split(" ");
				if(arr1.length > 0) {
					var presetName1 = _gthis.get_trainingDataKey();
					_gthis.namesTitleElement.innerHTML = presetName1;
					_gthis.duplicateTrie = new markov_util_PrefixTrie();
					var _g2 = 0;
					while(_g2 < arr1.length) {
						var name3 = arr1[_g2];
						++_g2;
						_gthis.duplicateTrie.insert(name3);
					}
					_gthis.generator = new markov_namegen_NameGenerator(arr1,_gthis.order,_gthis.prior);
					var names1 = [];
					var startTime1 = new Date().getTime();
					var currentTime1 = new Date().getTime();
					while(names1.length < _gthis.maxWordsToGenerate && currentTime1 < startTime1 + _gthis.maxProcessingTime) {
						var name4 = _gthis.generator.generateName(_gthis.minLength,_gthis.maxLength,_gthis.get_startsWith(),_gthis.get_endsWith(),_gthis.get_includes(),_gthis.get_excludes());
						if(name4 != null && !_gthis.duplicateTrie.find(name4)) {
							names1.push(name4);
							_gthis.duplicateTrie.insert(name4);
						}
						currentTime1 = new Date().getTime();
					}
					var _gthis2 = _gthis;
					_gthis.lastNames = names1;
					if(_gthis.get_similar().length > 0) {
						names1.sort(function(x1,y1) {
							var target2 = _gthis2.get_similar();
							if(!(x1 != null)) {
								throw new js__$Boot_HaxeError("FAIL: source != null");
							}
							if(!(target2 != null)) {
								throw new js__$Boot_HaxeError("FAIL: target != null");
							}
							var xSimilarity1;
							if(x1.length == 0) {
								xSimilarity1 = target2.length;
							} else if(target2.length == 0) {
								xSimilarity1 = x1.length;
							} else {
								var table2 = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(x1,target2,true);
								xSimilarity1 = table2[table2.length - 1];
							}
							var target3 = _gthis2.get_similar();
							if(!(y1 != null)) {
								throw new js__$Boot_HaxeError("FAIL: source != null");
							}
							if(!(target3 != null)) {
								throw new js__$Boot_HaxeError("FAIL: target != null");
							}
							var ySimilarity1;
							if(y1.length == 0) {
								ySimilarity1 = target3.length;
							} else if(target3.length == 0) {
								ySimilarity1 = y1.length;
							} else {
								var table3 = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(y1,target3,true);
								ySimilarity1 = table3[table3.length - 1];
							}
							if(xSimilarity1 > ySimilarity1) {
								return 1;
							} else if(xSimilarity1 < ySimilarity1) {
								return -1;
							} else {
								return 0;
							}
						});
					}
					_gthis.noNamesFoundElement.innerHTML = "";
					_gthis.currentNamesElement.innerHTML = "";
					if(names1.length == 0) {
						_gthis.noNamesFoundElement.textContent = "No names found, try again or change the name generation settings.";
					}
					var _g3 = 0;
					while(_g3 < names1.length) {
						var name5 = names1[_g3];
						++_g3;
						var li1 = window.document.createElement("li");
						if(!(name5 != null)) {
							throw new js__$Boot_HaxeError("FAIL: str != null");
						}
						//li1.textContent = HxOverrides.substr(name5,0,1).toUpperCase() + HxOverrides.substr(name5,1,name5.length - 1);
//						li1.textContent = name5;
//						_gthis.currentNamesElement.appendChild(li1);
						_gthis.currentNamesElement.innerHTML +=name5 + " ";
					}
				}
			}
		},false);
		this.randomThemeElement.addEventListener("click",function() {
			var topics = Type.getClassFields(TrainingDatas);
			var topic = topics[Std.random(topics.length)];
			_gthis.set_trainingDataKey(topic);
			var data2 = _gthis.trainingDataTextEdit.value;
			if(!(data2 == null || data2.length == 0)) {
				var arr2 = data2.split(" ");
				if(arr2.length > 0) {
					var presetName2 = _gthis.get_trainingDataKey();
					_gthis.namesTitleElement.innerHTML = presetName2;
					_gthis.duplicateTrie = new markov_util_PrefixTrie();
					var _g4 = 0;
					while(_g4 < arr2.length) {
						var name6 = arr2[_g4];
						++_g4;
						_gthis.duplicateTrie.insert(name6);
					}
					_gthis.generator = new markov_namegen_NameGenerator(arr2,_gthis.order,_gthis.prior);
					var names2 = [];
					var startTime2 = new Date().getTime();
					var currentTime2 = new Date().getTime();
					while(names2.length < _gthis.maxWordsToGenerate && currentTime2 < startTime2 + _gthis.maxProcessingTime) {
						var name7 = _gthis.generator.generateName(_gthis.minLength,_gthis.maxLength,_gthis.get_startsWith(),_gthis.get_endsWith(),_gthis.get_includes(),_gthis.get_excludes());
						if(name7 != null && !_gthis.duplicateTrie.find(name7)) {
							names2.push(name7);
							_gthis.duplicateTrie.insert(name7);
						}
						currentTime2 = new Date().getTime();
					}
					var _gthis3 = _gthis;
					_gthis.lastNames = names2;
					if(_gthis.get_similar().length > 0) {
						names2.sort(function(x2,y2) {
							var target4 = _gthis3.get_similar();
							if(!(x2 != null)) {
								throw new js__$Boot_HaxeError("FAIL: source != null");
							}
							if(!(target4 != null)) {
								throw new js__$Boot_HaxeError("FAIL: target != null");
							}
							var xSimilarity2;
							if(x2.length == 0) {
								xSimilarity2 = target4.length;
							} else if(target4.length == 0) {
								xSimilarity2 = x2.length;
							} else {
								var table4 = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(x2,target4,true);
								xSimilarity2 = table4[table4.length - 1];
							}
							var target5 = _gthis3.get_similar();
							if(!(y2 != null)) {
								throw new js__$Boot_HaxeError("FAIL: source != null");
							}
							if(!(target5 != null)) {
								throw new js__$Boot_HaxeError("FAIL: target != null");
							}
							var ySimilarity2;
							if(y2.length == 0) {
								ySimilarity2 = target5.length;
							} else if(target5.length == 0) {
								ySimilarity2 = y2.length;
							} else {
								var table5 = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(y2,target5,true);
								ySimilarity2 = table5[table5.length - 1];
							}
							if(xSimilarity2 > ySimilarity2) {
								return 1;
							} else if(xSimilarity2 < ySimilarity2) {
								return -1;
							} else {
								return 0;
							}
						});
					}
					_gthis.noNamesFoundElement.innerHTML = "";
					_gthis.currentNamesElement.innerHTML = "";
					if(names2.length == 0) {
						_gthis.noNamesFoundElement.textContent = "No names found, try again or change the name generation settings.";
					}
					var _g5 = 0;
					while(_g5 < names2.length) {
						var name8 = names2[_g5];
						++_g5;
						var li2 = window.document.createElement("li");
						if(!(name8 != null)) {
							throw new js__$Boot_HaxeError("FAIL: str != null");
						}
						//li2.textContent = HxOverrides.substr(name8,0,1).toUpperCase() + HxOverrides.substr(name8,1,name8.length - 1);
//						li2.textContent = name8;
//						_gthis.currentNamesElement.appendChild(li2);
						_gthis.currentNamesElement.innerHTML +=name8 + " ";
					}
				}
			}
		},false);
		this.startsWithElement.addEventListener("change",function() {
			if(_gthis.startsWithElement.value != null) {
				var tmp = _gthis.startsWithElement.value.toLowerCase();
				_gthis.set_startsWith(tmp);
			}
		},false);
		this.endsWithElement.addEventListener("change",function() {
			if(_gthis.endsWithElement.value != null) {
				var tmp1 = _gthis.endsWithElement.value.toLowerCase();
				_gthis.set_endsWith(tmp1);
			}
		},false);
		this.includesElement.addEventListener("change",function() {
			if(_gthis.includesElement.value != null) {
				var tmp2 = _gthis.includesElement.value.toLowerCase();
				_gthis.set_includes(tmp2);
			}
		},false);
		this.excludesElement.addEventListener("change",function() {
			if(_gthis.excludesElement.value != null) {
				var tmp3 = _gthis.excludesElement.value.toLowerCase();
				_gthis.set_excludes(tmp3);
			}
		},false);
		this.similarElement.addEventListener("change",function() {
			if(_gthis.similarElement.value != null) {
				var tmp4 = _gthis.similarElement.value.toLowerCase();
				_gthis.set_similar(tmp4);
			}
		},false);
		this.shareResultsAndSettingsElement.addEventListener("click",function() {
			_gthis.shareLinkTextEdit.value = _gthis.makeCustomQueryString(_$Main_CustomQueryStringOption.EVERYTHING);
			_gthis.shareLinkTextEdit.style.display = "block";
		},false);
		this.shareResultsOnlyElement.addEventListener("click",function() {
			_gthis.shareLinkTextEdit.value = _gthis.makeCustomQueryString(_$Main_CustomQueryStringOption.NO_TRAINING_DATA);
			_gthis.shareLinkTextEdit.style.display = "block";
		},false);
	}
	,onNameDataPresetSelectionChanged: function(key) {
		var data = this.getTrainingDataForKey(key);
		var s = "";
		var _g = 0;
		var _g1 = data.data;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			s += i + " ";
		}
		s = StringTools.rtrim(s);
		this.trainingDataTextEdit.value = s;
	}
	,createTooltips: function(slider) {
		var tipHandles = slider.getElementsByClassName("noUi-handle");
		var _g1 = 0;
		var _g = tipHandles.length;
		while(_g1 < _g) {
			var i = _g1++;
			var div = window.document.createElement("div");
			div.className += "tooltip";
			tipHandles[i].appendChild(div);
			this.updateTooltips(slider,i,0);
		}
	}
	,updateTooltips: function(slider,handleIdx,value) {
		var tipHandles = slider.getElementsByClassName("noUi-handle");
		tipHandles[handleIdx].innerHTML = "<span class='tooltip'>" + (value == null ? "null" : "" + value) + "</span>";
	}
	,generate: function(presetName,data) {
		this.namesTitleElement.innerHTML = presetName;
		this.duplicateTrie = new markov_util_PrefixTrie();
		var _g = 0;
		while(_g < data.length) {
			var name = data[_g];
			++_g;
			this.duplicateTrie.insert(name);
		}
		this.generator = new markov_namegen_NameGenerator(data,this.order,this.prior);
		var names = [];
		var startTime = new Date().getTime();
		var currentTime = new Date().getTime();
		while(names.length < this.maxWordsToGenerate && currentTime < startTime + this.maxProcessingTime) {
			var name1 = this.generator.generateName(this.minLength,this.maxLength,this.get_startsWith(),this.get_endsWith(),this.get_includes(),this.get_excludes());
			if(name1 != null && !this.duplicateTrie.find(name1)) {
				names.push(name1);
				this.duplicateTrie.insert(name1);
			}
			currentTime = new Date().getTime();
		}
		var _gthis = this;
		this.lastNames = names;
		if(this.get_similar().length > 0) {
			names.sort(function(x,y) {
				var target = _gthis.get_similar();
				if(!(x != null)) {
					throw new js__$Boot_HaxeError("FAIL: source != null");
				}
				if(!(target != null)) {
					throw new js__$Boot_HaxeError("FAIL: target != null");
				}
				var xSimilarity;
				if(x.length == 0) {
					xSimilarity = target.length;
				} else if(target.length == 0) {
					xSimilarity = x.length;
				} else {
					var table = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(x,target,true);
					xSimilarity = table[table.length - 1];
				}
				var target1 = _gthis.get_similar();
				if(!(y != null)) {
					throw new js__$Boot_HaxeError("FAIL: source != null");
				}
				if(!(target1 != null)) {
					throw new js__$Boot_HaxeError("FAIL: target != null");
				}
				var ySimilarity;
				if(y.length == 0) {
					ySimilarity = target1.length;
				} else if(target1.length == 0) {
					ySimilarity = y.length;
				} else {
					var table1 = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(y,target1,true);
					ySimilarity = table1[table1.length - 1];
				}
				if(xSimilarity > ySimilarity) {
					return 1;
				} else if(xSimilarity < ySimilarity) {
					return -1;
				} else {
					return 0;
				}
			});
		}
		this.noNamesFoundElement.innerHTML = "";
		this.currentNamesElement.innerHTML = "";
		if(names.length == 0) {
			this.noNamesFoundElement.textContent = "No names found, try again or change the name generation settings.";
		}
		var _g1 = 0;
		while(_g1 < names.length) {
			var name2 = names[_g1];
			++_g1;
			var li = window.document.createElement("li");
			if(!(name2 != null)) {
				throw new js__$Boot_HaxeError("FAIL: str != null");
			}
			//li.textContent = HxOverrides.substr(name2,0,1).toUpperCase() + HxOverrides.substr(name2,1,name2.length - 1);
//			li.textContent = name2;
//			this.currentNamesElement.appendChild(li);
			this.currentNamesElement.innerHTML +=name2 + " ";
		}
	}
	,generateForRandomPreset: function() {
		var topics = Type.getClassFields(TrainingDatas);
		var topic = topics[Std.random(topics.length)];
		this.set_trainingDataKey(topic);
		var data = this.trainingDataTextEdit.value;
		if(data == null || data.length == 0) {
			return;
		}
		var arr = data.split(" ");
		if(arr.length > 0) {
			var presetName = this.get_trainingDataKey();
			this.namesTitleElement.innerHTML = presetName;
			this.duplicateTrie = new markov_util_PrefixTrie();
			var _g = 0;
			while(_g < arr.length) {
				var name = arr[_g];
				++_g;
				this.duplicateTrie.insert(name);
			}
			this.generator = new markov_namegen_NameGenerator(arr,this.order,this.prior);
			var names = [];
			var startTime = new Date().getTime();
			var currentTime = new Date().getTime();
			while(names.length < this.maxWordsToGenerate && currentTime < startTime + this.maxProcessingTime) {
				var name1 = this.generator.generateName(this.minLength,this.maxLength,this.get_startsWith(),this.get_endsWith(),this.get_includes(),this.get_excludes());
				if(name1 != null && !this.duplicateTrie.find(name1)) {
					names.push(name1);
					this.duplicateTrie.insert(name1);
				}
				currentTime = new Date().getTime();
			}
			var _gthis = this;
			this.lastNames = names;
			if(this.get_similar().length > 0) {
				names.sort(function(x,y) {
					var target = _gthis.get_similar();
					if(!(x != null)) {
						throw new js__$Boot_HaxeError("FAIL: source != null");
					}
					if(!(target != null)) {
						throw new js__$Boot_HaxeError("FAIL: target != null");
					}
					var xSimilarity;
					if(x.length == 0) {
						xSimilarity = target.length;
					} else if(target.length == 0) {
						xSimilarity = x.length;
					} else {
						var table = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(x,target,true);
						xSimilarity = table[table.length - 1];
					}
					var target1 = _gthis.get_similar();
					if(!(y != null)) {
						throw new js__$Boot_HaxeError("FAIL: source != null");
					}
					if(!(target1 != null)) {
						throw new js__$Boot_HaxeError("FAIL: target != null");
					}
					var ySimilarity;
					if(y.length == 0) {
						ySimilarity = target1.length;
					} else if(target1.length == 0) {
						ySimilarity = y.length;
					} else {
						var table1 = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(y,target1,true);
						ySimilarity = table1[table1.length - 1];
					}
					if(xSimilarity > ySimilarity) {
						return 1;
					} else if(xSimilarity < ySimilarity) {
						return -1;
					} else {
						return 0;
					}
				});
			}
			this.noNamesFoundElement.innerHTML = "";
			this.currentNamesElement.innerHTML = "";
			if(names.length == 0) {
				this.noNamesFoundElement.textContent = "No names found, try again or change the name generation settings.";
			}
			var _g1 = 0;
			while(_g1 < names.length) {
				var name2 = names[_g1];
				++_g1;
				var li = window.document.createElement("li");
				if(!(name2 != null)) {
					throw new js__$Boot_HaxeError("FAIL: str != null");
				}
				//li.textContent = HxOverrides.substr(name2,0,1).toUpperCase() + HxOverrides.substr(name2,1,name2.length - 1);
//				li.textContent = name2;
//				this.currentNamesElement.appendChild(li);
				this.currentNamesElement.innerHTML +=name2 + " ";
			}
		}
	}
	,generateForCurrentSettings: function() {
		var data = this.trainingDataTextEdit.value;
		if(data == null || data.length == 0) {
			return;
		}
		var arr = data.split(" ");
		if(arr.length > 0) {
			var presetName = this.get_trainingDataKey();
			this.namesTitleElement.innerHTML = presetName;
			this.duplicateTrie = new markov_util_PrefixTrie();
			var _g = 0;
			while(_g < arr.length) {
				var name = arr[_g];
				++_g;
				this.duplicateTrie.insert(name);
			}
			this.generator = new markov_namegen_NameGenerator(arr,this.order,this.prior);
			var names = [];
			var startTime = new Date().getTime();
			var currentTime = new Date().getTime();
			while(names.length < this.maxWordsToGenerate && currentTime < startTime + this.maxProcessingTime) {
				var name1 = this.generator.generateName(this.minLength,this.maxLength,this.get_startsWith(),this.get_endsWith(),this.get_includes(),this.get_excludes());
				if(name1 != null && !this.duplicateTrie.find(name1)) {
					names.push(name1);
					this.duplicateTrie.insert(name1);
				}
				currentTime = new Date().getTime();
			}
			var _gthis = this;
			this.lastNames = names;
			if(this.get_similar().length > 0) {
				names.sort(function(x,y) {
					var target = _gthis.get_similar();
					if(!(x != null)) {
						throw new js__$Boot_HaxeError("FAIL: source != null");
					}
					if(!(target != null)) {
						throw new js__$Boot_HaxeError("FAIL: target != null");
					}
					var xSimilarity;
					if(x.length == 0) {
						xSimilarity = target.length;
					} else if(target.length == 0) {
						xSimilarity = x.length;
					} else {
						var table = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(x,target,true);
						xSimilarity = table[table.length - 1];
					}
					var target1 = _gthis.get_similar();
					if(!(y != null)) {
						throw new js__$Boot_HaxeError("FAIL: source != null");
					}
					if(!(target1 != null)) {
						throw new js__$Boot_HaxeError("FAIL: target != null");
					}
					var ySimilarity;
					if(y.length == 0) {
						ySimilarity = target1.length;
					} else if(target1.length == 0) {
						ySimilarity = y.length;
					} else {
						var table1 = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(y,target1,true);
						ySimilarity = table1[table1.length - 1];
					}
					if(xSimilarity > ySimilarity) {
						return 1;
					} else if(xSimilarity < ySimilarity) {
						return -1;
					} else {
						return 0;
					}
				});
			}
			this.noNamesFoundElement.innerHTML = "";
			this.currentNamesElement.innerHTML = "";
			if(names.length == 0) {
				this.noNamesFoundElement.textContent = "No names found, try again or change the name generation settings.";
			}
			var _g1 = 0;
			while(_g1 < names.length) {
				var name2 = names[_g1];
				++_g1;
				var li = window.document.createElement("li");
				if(!(name2 != null)) {
					throw new js__$Boot_HaxeError("FAIL: str != null");
				}
//				li.textContent = name2;//HxOverrides.substr(name2,0,1).toUpperCase() + HxOverrides.substr(name2,1,name2.length - 1);
//				this.currentNamesElement.appendChild(li);
				this.currentNamesElement.innerHTML +=name2 + " ";
			}
		}
	}
	,setNames: function(names) {
		var _gthis = this;
		this.lastNames = names;
		if(this.get_similar().length > 0) {
			names.sort(function(x,y) {
				var target = _gthis.get_similar();
				if(!(x != null)) {
					throw new js__$Boot_HaxeError("FAIL: source != null");
				}
				if(!(target != null)) {
					throw new js__$Boot_HaxeError("FAIL: target != null");
				}
				var xSimilarity;
				if(x.length == 0) {
					xSimilarity = target.length;
				} else if(target.length == 0) {
					xSimilarity = x.length;
				} else {
					var table = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(x,target,true);
					xSimilarity = table[table.length - 1];
				}
				var target1 = _gthis.get_similar();
				if(!(y != null)) {
					throw new js__$Boot_HaxeError("FAIL: source != null");
				}
				if(!(target1 != null)) {
					throw new js__$Boot_HaxeError("FAIL: target != null");
				}
				var ySimilarity;
				if(y.length == 0) {
					ySimilarity = target1.length;
				} else if(target1.length == 0) {
					ySimilarity = y.length;
				} else {
					var table1 = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(y,target1,true);
					ySimilarity = table1[table1.length - 1];
				}
				if(xSimilarity > ySimilarity) {
					return 1;
				} else if(xSimilarity < ySimilarity) {
					return -1;
				} else {
					return 0;
				}
			});
		}
		this.noNamesFoundElement.innerHTML = "";
		this.currentNamesElement.innerHTML = "";
		if(names.length == 0) {
			this.noNamesFoundElement.textContent = "No names found, try again or change the name generation settings.";
		}
		var _g = 0;
		while(_g < names.length) {
			var name = names[_g];
			++_g;
			var li = window.document.createElement("li");
			if(!(name != null)) {
				throw new js__$Boot_HaxeError("FAIL: str != null");
			}
//			li.textContent = name;//HxOverrides.substr(name,0,1).toUpperCase() + HxOverrides.substr(name,1,name.length - 1);
//			this.currentNamesElement.appendChild(li);
				this.currentNamesElement.innerHTML +=name + " ";
		}
	}
	,getTrainingDataForKey: function(key) {
		var _g = 0;
		var _g1 = this.trainingData;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			if(data.value == key) {
				return data;
			}
		}
		return null;
	}
	,get_trainingDataKey: function() {
		return this.nameDataPresetListElement.value;
	}
	,set_trainingDataKey: function(key) {
		this.nameDataPresetListElement.value = key;
		this.nameDataSearchBoxElement.value = key;
		this.onNameDataPresetSelectionChanged(key);
		return this.nameDataPresetListElement.value;
	}
	,get_startsWith: function() {
		return this.startsWithElement.value.toLowerCase();
	}
	,set_startsWith: function(s) {
		return this.startsWithElement.value = s.toLowerCase();
	}
	,get_endsWith: function() {
		return this.endsWithElement.value.toLowerCase();
	}
	,set_endsWith: function(s) {
		return this.endsWithElement.value = s.toLowerCase();
	}
	,get_includes: function() {
		return this.includesElement.value.toLowerCase();
	}
	,set_includes: function(s) {
		return this.includesElement.value = s.toLowerCase();
	}
	,get_excludes: function() {
		return this.excludesElement.value.toLowerCase();
	}
	,set_excludes: function(s) {
		return this.excludesElement.value = s.toLowerCase();
	}
	,get_similar: function() {
		return this.similarElement.value.toLowerCase();
	}
	,set_similar: function(s) {
		return this.similarElement.value = s.toLowerCase();
	}
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return HxOverrides.substr(s,0,start.length) == start;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return HxOverrides.substr(s,slen - elen,elen) == end;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var Type = function() { };
Type.__name__ = true;
Type.getClassFields = function(c) {
	var a = Reflect.fields(c);
	HxOverrides.remove(a,"__name__");
	HxOverrides.remove(a,"__interfaces__");
	HxOverrides.remove(a,"__properties__");
	HxOverrides.remove(a,"__super__");
	HxOverrides.remove(a,"__meta__");
	HxOverrides.remove(a,"prototype");
	return a;
};
var _$UInt_UInt_$Impl_$ = {};
_$UInt_UInt_$Impl_$.__name__ = true;
_$UInt_UInt_$Impl_$.gte = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a >= b;
	}
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var markov_namegen_Generator = function(data,order,prior) {
	if(!(data != null)) {
		throw new js__$Boot_HaxeError("FAIL: data != null");
	}
	if(!_$UInt_UInt_$Impl_$.gte(order,1)) {
		throw new js__$Boot_HaxeError("FAIL: order >= 1");
	}
	if(!(prior >= 0)) {
		throw new js__$Boot_HaxeError("FAIL: prior >= 0");
	}
	this.order = order;
	this.prior = prior;
	var letters = markov_util__$ArraySet_ArraySet_$Impl_$.create();
	var _g = 0;
	while(_g < data.length) {
		var word = data[_g];
		++_g;
		var _g2 = 0;
		var _g1 = word.length;
		while(_g2 < _g1) {
			var i = _g2++;
			markov_util__$ArraySet_ArraySet_$Impl_$.add(letters,word.charAt(i));
		}
	}
	letters.sort(function(a,b) {
		if(a < b) {
			return -1;
		}
		if(a > b) {
			return 1;
		}
		return 0;
	});
	var domain = markov_util__$ArraySet_ArraySet_$Impl_$.toArray(letters);
	domain.splice(0,0,"#");
	this.models = [];
	var _g11 = 0;
	var _g3 = order;
	while(_g11 < _g3) {
		var i1 = _g11++;
		this.models.push(new markov_namegen_Model(data.slice(),order - i1,prior,domain));
	}
};
markov_namegen_Generator.__name__ = true;
markov_namegen_Generator.prototype = {
	generate: function() {
		var times = this.order;
		if(!true) {
			throw new js__$Boot_HaxeError("FAIL: str != null");
		}
		if(!(times >= 1)) {
			throw new js__$Boot_HaxeError("FAIL: times >= 1");
		}
		var output = "";
		var _g1 = 0;
		var _g = times;
		while(_g1 < _g) {
			var i = _g1++;
			output += "#";
		}
		var word = output;
		var letter = this.getLetter(word);
		while(letter != "#") {
			if(letter != null) {
				word += letter;
			}
			letter = this.getLetter(word);
		}
		return word;
	}
	,getLetter: function(context) {
		if(!(context != null)) {
			throw new js__$Boot_HaxeError("FAIL: context != null");
		}
		if(!(context.length > 0)) {
			throw new js__$Boot_HaxeError("FAIL: context.length > 0");
		}
		var letter = null;
		var context1 = context.substring(context.length - this.order,context.length);
		var _g = 0;
		var _g1 = this.models;
		while(_g < _g1.length) {
			var model = _g1[_g];
			++_g;
			letter = model.generate(context1);
			if(letter == null) {
				context1 = context1.substring(1);
			} else {
				break;
			}
		}
		return letter;
	}
};
var markov_namegen_Model = function(data,order,prior,alphabet) {
	if(!(alphabet != null && data != null)) {
		throw new js__$Boot_HaxeError("FAIL: alphabet != null && data != null");
	}
	if(!(alphabet.length > 0 && data.length > 0)) {
		throw new js__$Boot_HaxeError("FAIL: alphabet.length > 0 && data.length > 0");
	}
	if(!(prior >= 0 && prior <= 1)) {
		throw new js__$Boot_HaxeError("FAIL: prior >= 0 && prior <= 1");
	}
	this.order = order;
	this.prior = prior;
	this.alphabet = alphabet;
	this.observations = new haxe_ds_StringMap();
	this.train(data);
	this.buildChains();
};
markov_namegen_Model.__name__ = true;
markov_namegen_Model.countMatches = function(arr,v) {
	if(arr == null) {
		return 0;
	}
	var i = 0;
	var _g = 0;
	while(_g < arr.length) {
		var s = arr[_g];
		++_g;
		if(s == v) {
			++i;
		}
	}
	return i;
};
markov_namegen_Model.selectIndex = function(chain) {
	var totals = [];
	var accumulator = 0;
	var _g = 0;
	while(_g < chain.length) {
		var weight = chain[_g];
		++_g;
		accumulator += weight;
		totals.push(accumulator);
	}
	var rand = Math.random() * accumulator;
	var _g1 = 0;
	var _g2 = totals.length;
	while(_g1 < _g2) {
		var i = _g1++;
		if(rand < totals[i]) {
			return i;
		}
	}
	return 0;
};
markov_namegen_Model.prototype = {
	generate: function(context) {
		if(!(context != null)) {
			throw new js__$Boot_HaxeError("FAIL: context != null");
		}
		var _this = this.chains;
		var chain = __map_reserved[context] != null ? _this.getReserved(context) : _this.h[context];
		if(chain == null) {
			return null;
		} else {
			if(!(chain.length > 0)) {
				throw new js__$Boot_HaxeError("FAIL: chain.length > 0");
			}
			return this.alphabet[markov_namegen_Model.selectIndex(chain)];
		}
	}
	,retrain: function(data) {
		if(!(data != null)) {
			throw new js__$Boot_HaxeError("FAIL: data != null");
		}
		this.train(data);
		this.buildChains();
	}
	,train: function(data) {
		while(data.length != 0) {
			var d = data.pop();
			var times = this.order;
			if(!true) {
				throw new js__$Boot_HaxeError("FAIL: str != null");
			}
			if(!(times >= 1)) {
				throw new js__$Boot_HaxeError("FAIL: times >= 1");
			}
			var output = "";
			var _g1 = 0;
			var _g = times;
			while(_g1 < _g) {
				var i = _g1++;
				output += "#";
			}
			d = output + d + "#";
			var _g11 = 0;
			var _g2 = d.length - this.order;
			while(_g11 < _g2) {
				var i1 = _g11++;
				var key = d.substring(i1,i1 + this.order);
				var _this = this.observations;
				var value = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
				if(value == null) {
					value = [];
					var _this1 = this.observations;
					if(__map_reserved[key] != null) {
						_this1.setReserved(key,value);
					} else {
						_this1.h[key] = value;
					}
				}
				value.push(d.charAt(i1 + this.order));
			}
		}
	}
	,buildChains: function() {
		this.chains = new haxe_ds_StringMap();
		var context = this.observations.keys();
		while(context.hasNext()) {
			var context1 = context.next();
			var _g = 0;
			var _g1 = this.alphabet;
			while(_g < _g1.length) {
				var prediction = _g1[_g];
				++_g;
				var _this = this.chains;
				var value = __map_reserved[context1] != null ? _this.getReserved(context1) : _this.h[context1];
				if(value == null) {
					value = [];
					var _this1 = this.chains;
					if(__map_reserved[context1] != null) {
						_this1.setReserved(context1,value);
					} else {
						_this1.h[context1] = value;
					}
				}
				var tmp = this.prior;
				var _this2 = this.observations;
				var arr = __map_reserved[context1] != null ? _this2.getReserved(context1) : _this2.h[context1];
				var tmp1;
				if(arr == null) {
					tmp1 = 0;
				} else {
					var i = 0;
					var _g2 = 0;
					while(_g2 < arr.length) {
						var s = arr[_g2];
						++_g2;
						if(s == prediction) {
							++i;
						}
					}
					tmp1 = i;
				}
				value.push(tmp + tmp1);
			}
		}
	}
};
var markov_namegen_NameGenerator = function(data,order,prior) {
	this.generator = new markov_namegen_Generator(data,order,prior);
};
markov_namegen_NameGenerator.__name__ = true;
markov_namegen_NameGenerator.prototype = {
	generateName: function(minLength,maxLength,startsWith,endsWith,includes,excludes) {
		var name = "";
		name = this.generator.generate();
		name = StringTools.replace(name,"#","");
		var tmp;
		var tmp1;
		if(name.length >= minLength && name.length <= maxLength && StringTools.startsWith(name,startsWith) && StringTools.endsWith(name,endsWith)) {
			if(includes.length != 0) {
				if(!(name != null)) {
					throw new js__$Boot_HaxeError("FAIL: str != null");
				}
				if(!(includes != null)) {
					throw new js__$Boot_HaxeError("FAIL: substr != null");
				}
				tmp1 = name.indexOf(includes) >= 0;
			} else {
				tmp1 = true;
			}
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			if(excludes.length != 0) {
				if(!(name != null)) {
					throw new js__$Boot_HaxeError("FAIL: str != null");
				}
				if(!(excludes != null)) {
					throw new js__$Boot_HaxeError("FAIL: substr != null");
				}
				tmp = name.indexOf(excludes) < 0;
			} else {
				tmp = true;
			}
		} else {
			tmp = false;
		}
		if(tmp) {
			return name;
		}
		return null;
	}
	,generateNames: function(n,minLength,maxLength,startsWith,endsWith,includes,excludes,maxTimePerName) {
		if(maxTimePerName == null) {
			maxTimePerName = 0.02;
		}
		var names = [];
		var startTime = new Date().getTime();
		var currentTime = new Date().getTime();
		while(names.length < n && currentTime > startTime + maxTimePerName * n) {
			var name = this.generateName(minLength,maxLength,startsWith,endsWith,includes,excludes);
			if(name != null) {
				names.push(name);
			}
			currentTime = new Date().getTime();
		}
		return names;
	}
};
var markov_util__$ArraySet_ArraySet_$Impl_$ = {};
markov_util__$ArraySet_ArraySet_$Impl_$.__name__ = true;
markov_util__$ArraySet_ArraySet_$Impl_$.create = function(array) {
	if(array == null) {
		var this1 = [];
		return this1;
	}
	return markov_util__$ArraySet_ArraySet_$Impl_$.toSet(array);
};
markov_util__$ArraySet_ArraySet_$Impl_$.intersection = function(this1,set) {
	var result = [];
	var _g = 0;
	while(_g < this1.length) {
		var element = this1[_g];
		++_g;
		if(markov_util__$ArraySet_ArraySet_$Impl_$.contains(set,element)) {
			result.push(element);
		}
	}
	var this2 = result;
	return this2;
};
markov_util__$ArraySet_ArraySet_$Impl_$.union = function(this1,set) {
	return markov_util__$ArraySet_ArraySet_$Impl_$.toSet(this1.concat(markov_util__$ArraySet_ArraySet_$Impl_$.toArray(set)));
};
markov_util__$ArraySet_ArraySet_$Impl_$.unionArray = function(this1,array) {
	return markov_util__$ArraySet_ArraySet_$Impl_$.toSet(this1.concat(array));
};
markov_util__$ArraySet_ArraySet_$Impl_$.difference = function(this1,set) {
	var this2 = this1.slice();
	var result = this2;
	var element = HxOverrides.iter(set);
	while(element.hasNext()) {
		var element1 = element.next();
		HxOverrides.remove(result,element1);
	}
	var this3 = markov_util__$ArraySet_ArraySet_$Impl_$.toArray(result);
	return this3;
};
markov_util__$ArraySet_ArraySet_$Impl_$.add = function(this1,element) {
	if(!(element != null)) {
		throw new js__$Boot_HaxeError("FAIL: element != null");
	}
	if(markov_util__$ArraySet_ArraySet_$Impl_$.contains(this1,element)) {
		return false;
	}
	this1.push(element);
	return true;
};
markov_util__$ArraySet_ArraySet_$Impl_$.contains = function(this1,element) {
	var _g = 0;
	while(_g < this1.length) {
		var i = this1[_g];
		++_g;
		if(i == element) {
			return true;
		}
	}
	return false;
};
markov_util__$ArraySet_ArraySet_$Impl_$.copy = function(this1) {
	var this2 = this1.slice();
	return this2;
};
markov_util__$ArraySet_ArraySet_$Impl_$.slice = function(this1,position,end) {
	var this2 = this1.slice(position,end);
	return this2;
};
markov_util__$ArraySet_ArraySet_$Impl_$.splice = function(this1,position,length) {
	var this2 = this1.splice(position,length);
	return this2;
};
markov_util__$ArraySet_ArraySet_$Impl_$.toArray = function(this1) {
	return this1.slice();
};
markov_util__$ArraySet_ArraySet_$Impl_$.toSet = function(array) {
	var this1 = [];
	var set = this1;
	var _g = 0;
	while(_g < array.length) {
		var v = array[_g];
		++_g;
		markov_util__$ArraySet_ArraySet_$Impl_$.add(set,v);
	}
	return set;
};
markov_util__$ArraySet_ArraySet_$Impl_$._new = function(array) {
	var this1 = array;
	return this1;
};
var markov_util_EditDistanceMetrics = function() { };
markov_util_EditDistanceMetrics.__name__ = true;
markov_util_EditDistanceMetrics.levenshtein = function(source,target) {
	if(!(source != null)) {
		throw new js__$Boot_HaxeError("FAIL: source != null");
	}
	if(!(target != null)) {
		throw new js__$Boot_HaxeError("FAIL: target != null");
	}
	var slen = source.length;
	var tlen = target.length;
	if(slen == 0) {
		return tlen;
	}
	if(tlen == 0) {
		return slen;
	}
	var this1 = new Array(tlen + 1);
	var costs = this1;
	var _g1 = 0;
	var _g = costs.length;
	while(_g1 < _g) {
		var i = _g1++;
		costs[i] = i;
	}
	var s = 0;
	while(s < source.length) {
		costs[0] = s + 1;
		var corner = s;
		var t = 0;
		while(t < target.length) {
			var upper = costs[t + 1];
			if(source.charAt(s) == target.charAt(t)) {
				costs[t + 1] = corner;
			} else {
				var tc = upper < corner ? upper : corner;
				costs[t + 1] = (costs[t] < tc ? costs[t] : tc) + 1;
			}
			corner = upper;
			++t;
		}
		++s;
	}
	return costs[costs.length - 1];
};
markov_util_EditDistanceMetrics.damerauLevenshtein = function(source,target) {
	if(!(source != null)) {
		throw new js__$Boot_HaxeError("FAIL: source != null");
	}
	if(!(target != null)) {
		throw new js__$Boot_HaxeError("FAIL: target != null");
	}
	if(source.length == 0) {
		return target.length;
	}
	if(target.length == 0) {
		return source.length;
	}
	var table = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(source,target,true);
	return table[table.length - 1];
};
markov_util_EditDistanceMetrics.damerauLevenshteinMatrix = function(source,target,enableTranspositions) {
	if(enableTranspositions == null) {
		enableTranspositions = true;
	}
	if(!(source != null && target != null)) {
		throw new js__$Boot_HaxeError("FAIL: source != null && target != null");
	}
	var w = source.length;
	var h = target.length;
	if(w == 0 || h == 0) {
		var this1 = new Array(0);
		return this1;
	}
	++w;
	++h;
	var this2 = new Array(w * h);
	var costs = this2;
	var _g1 = 0;
	var _g = w;
	while(_g1 < _g) {
		var i = _g1++;
		costs[i] = i;
	}
	var _g11 = 1;
	var _g2 = h;
	while(_g11 < _g2) {
		var j = _g11++;
		costs[j * w] = j;
	}
	var cost = 0;
	var _g12 = 1;
	var _g3 = w;
	while(_g12 < _g3) {
		var x = _g12++;
		var _g31 = 1;
		var _g21 = h;
		while(_g31 < _g21) {
			var y = _g31++;
			if(source.charAt(x - 1) == target.charAt(y - 1)) {
				cost = 0;
			} else {
				cost = 1;
			}
			var a = costs[x - 1 + y * w] + 1;
			var a1 = costs[x + (y - 1) * w] + 1;
			var b = costs[x - 1 + (y - 1) * w] + cost;
			var b1 = a1 < b ? a1 : b;
			costs[x + y * w] = a < b1 ? a : b1;
			if(enableTranspositions && x > 1 && y > 1 && source.charAt(x) == target.charAt(y - 1) && source.charAt(x - 1) == target.charAt(y)) {
				var a2 = costs[x + y * w];
				var b2 = costs[x - 2 + (y - 2) * w] + cost;
				costs[x + y * w] = a2 < b2 ? a2 : b2;
			}
		}
	}
	return costs;
};
var markov_util_IntExtensions = function() { };
markov_util_IntExtensions.__name__ = true;
markov_util_IntExtensions.clamp = function(value,min,max) {
	if(value < min) {
		return min;
	}
	if(value > max) {
		return max;
	}
	return value;
};
markov_util_IntExtensions.min = function(a,b) {
	if(a < b) {
		return a;
	}
	return b;
};
var markov_util_PrefixTrie = function() {
	this.root = new markov_util_PrefixNode(null,"",0);
};
markov_util_PrefixTrie.__name__ = true;
markov_util_PrefixTrie.findChild = function(node,letter) {
	var _g = 0;
	var _g1 = node.children;
	while(_g < _g1.length) {
		var child = _g1[_g];
		++_g;
		if(child.letter == letter) {
			return child;
		}
	}
	return null;
};
markov_util_PrefixTrie.prototype = {
	insert: function(word) {
		var current = this.root;
		var _g1 = 0;
		var _g = word.length;
		while(_g1 < _g) {
			var i = _g1++;
			var ch = word.charAt(i);
			var child = markov_util_PrefixTrie.findChild(current,ch);
			if(child == null) {
				child = new markov_util_PrefixNode(current,ch,i);
				current.children.push(child);
			} else {
				child.frequency++;
			}
			current = child;
		}
		current.word = true;
		return current.frequency;
	}
	,find: function(word) {
		var current = this.root;
		var _g1 = 0;
		var _g = word.length;
		while(_g1 < _g) {
			var i = _g1++;
			current = markov_util_PrefixTrie.findChild(current,word.charAt(i));
			if(current == null) {
				return false;
			}
		}
		if(!current.word) {
			return false;
		}
		return true;
	}
	,getWords: function() {
		var queue = new List();
		queue.add(this.root);
		var words = [];
		while(!queue.isEmpty()) {
			var node = queue.pop();
			if(node.word) {
				var word = node.letter;
				var parent = node.parent;
				while(parent != null) {
					word += parent.letter;
					parent = parent.parent;
				}
				if(!(word != null)) {
					throw new js__$Boot_HaxeError("FAIL: str != null");
				}
				var arr = word.split("");
				arr.reverse();
				words.push(arr.join(""));
			}
			var _g = 0;
			var _g1 = node.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				queue.add(child);
			}
		}
		return words;
	}
};
var markov_util_PrefixNode = function(parent,letter,depth) {
	if(!(letter.length == 1 || parent == null && depth == 0)) {
		throw new js__$Boot_HaxeError("FAIL: letter.length == 1 || (parent == null && depth == 0)");
	}
	this.parent = parent;
	this.children = [];
	this.letter = letter;
	this.depth = depth;
	this.frequency = 1;
	this.word = false;
};
markov_util_PrefixNode.__name__ = true;
var markov_util_StringExtensions = function() { };
markov_util_StringExtensions.__name__ = true;
markov_util_StringExtensions.reverse = function(str) {
	if(!(str != null)) {
		throw new js__$Boot_HaxeError("FAIL: str != null");
	}
	var arr = str.split("");
	arr.reverse();
	return arr.join("");
};
markov_util_StringExtensions.repeat = function(str,times) {
	if(!(str != null)) {
		throw new js__$Boot_HaxeError("FAIL: str != null");
	}
	if(!(times >= 1)) {
		throw new js__$Boot_HaxeError("FAIL: times >= 1");
	}
	var output = "";
	var _g1 = 0;
	var _g = times;
	while(_g1 < _g) {
		var i = _g1++;
		output += str;
	}
	return output;
};
markov_util_StringExtensions.contains = function(str,substr) {
	if(!(str != null)) {
		throw new js__$Boot_HaxeError("FAIL: str != null");
	}
	if(!(substr != null)) {
		throw new js__$Boot_HaxeError("FAIL: substr != null");
	}
	return str.indexOf(substr) >= 0;
};
markov_util_StringExtensions.capitalize = function(str) {
	if(!(str != null)) {
		throw new js__$Boot_HaxeError("FAIL: str != null");
	}
	return str;//HxOverrides.substr(str,0,1).toUpperCase() + HxOverrides.substr(str,1,str.length - 1);
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.__name__ = true;
Array.__name__ = true;
Date.__name__ = ["Date"];
var __map_reserved = {}
ID.header = "header";
ID.accordion = "accordion";
ID.trainingdatalist = "trainingdatalist";
ID.trainingdatasearchbox = "trainingdatasearchbox";
ID.namedatapresetslist = "namedatapresetslist";
ID.trainingdataedit = "trainingdataedit";
ID.minmaxlength = "minmaxlength";
ID.order = "order";
ID.prior = "prior";
ID.maxwordstogenerate = "maxwordstogenerate";
ID.maxtime = "maxtime";
ID.startswith = "startswith";
ID.endswith = "endswith";
ID.includes = "includes";
ID.excludes = "excludes";
ID.similar = "similar";
ID.generate = "generate";
ID.random = "random";
ID.namestitle = "namestitle";
ID.nonamesfound = "nonamesfound";
ID.currentnames = "currentnames";
ID.shareresultsonly = "shareresultsonly";
ID.shareresultsandsettings = "shareresultsandsettings";
ID.shareedit = "shareedit";
TrainingDatas["Polish 2"]=["Jeszcze Polska nie zginÄÅa,","Kiedy my Å¼yjemy.","Co nam obca przemoc wziÄÅa,","SzablÄ odbierzemy","Marsz, marsz, DÄbrowski,","Z ziemi wÅoskiej do Polski,","Za twoim przewodem","ZÅÄczym siÄ z narodem.","Przejdziem WisÅÄ, przejdziem WartÄ,","BÄdziem Polakami,","DaÅ nam przykÅad Bonaparte,","Jak zwyciÄÅ¼aÄ mamy.","Marsz, marsz, DÄbrowski","Jak Czarniecki do Poznania","Po szwedzkim zaborze,","Dla ojczyzny ratowania","WrÃ³cim siÄ przez morze.","JuÅ¼ tam ojciec do swej Basi","MÃ³wi zapÅakany-","SÅuchaj jeno, pono nasi","BijÄ w tarabany."];
TrainingDatas["SchwyzerdÃ¼tsch"]=[  "I lÃ¤cke mini hÃ¶de, wo und wenn ig wot Verstande ","SchwyzerdÃ¼tsch ","Wilkomme","GrÃ¼ezi ","Sali ","GrÃ¼ezi mittenand","Sali zÃ¤mme","Wie goots Ihne ","Wie goots ","Dangge, guet, und dir ","hÃ¤nn is schon lang nÃ¼mme g'seh.","Wie isch Ihre name ","Wie heissisch Du ","WohÃ¤r sind Sie ","WohÃ¤r bisch Du ","Ich bi vo ","FrÃ¶it mi","Guete Morge","Gueten Abig","Guete Daag","Gueten Oobe","Guet Nacht","TschÃ¼ss","Bis spÃ¶ter","Sali","Alles Gueti","Broscht","wÃ¼nsch Ihne e schÃ¶ne Daag ","Ich wÃ¼nsch Dir e schÃ¶ne Daag ","Gueti Reis","Ich verstand nit","Bitte schwÃ¤tze Sie langsamer ","schriibe Sie das uf ","schriib das uf ","KÃ¶nne Sie SchwitzerdÃ¼tsch reede ","Kasch Du SchwitzerdÃ¼tsch reede ","Yo, e bitz","ExgÃ¼Ã¼si","Was koschtet das","Es duet mr leid","Merci","vielmal","Dangge","NÃ¼t z'dangge","GÃ¤Ã¤rn gscheh","Wo isch d'Toilette","Herr zahlt fÃ¼r alles","MÃ¶chtesch Du mit mir danze","Ich liib dich","I ha Di gÃ¤rn","Gueti Besserig","LÃ¶hn Si mi in Ruh ","Loh mi in Ruh ","FÃ¼Ã¼r","SchÃ¶ni Wienachte und e guets neus Joor","HÃ¤rzlichi GlÃ¼ckwÃ¼nsch zum Geburtstag","Ai Sprooch isch nie gnueg","Mis LuftchÃ¼ssiboot isch volle Aal"
, " Auso liebi Manne ond Froue, sâLÃ¤be uf dÃ¤re WÃ¤ult hÃ¤t e so huufe spannendi Siite, dass es doch eifach e risigi FrÃ¶id macht, met Ã¶i zÃ¤me PlÃ¤ne zâschmiede fÃ¶res tolls Fescht am Ãndi vo dÃ¤m Winter. Oder? Giits das Ã¶ppe scho? Mir gsÃ¤ih Ã¶is doch bim VerbrÃ¶nne vom BÃ¶Ã¶g wider ufem SÃ¤chsilÃ¼teplatz. Tschau zÃ¤me"];

TrainingDatas["Polish"] = ["W trosce o byt i przyszÅoÅÄ naszej Ojczyzny"
  ,"odzyskawszy w 1989 roku moÅ¼liwoÅÄ suwerennego i demokratycznego stanowienia o Jej losie"
  ,"my, NarÃ³d Polski - wszyscy obywatele Rzeczypospolitej"
  ,"zarÃ³wno wierzÄcy w Boga"
  ,"bÄdÄcego ÅºrÃ³dÅem prawdy, sprawiedliwoÅci, dobra i piÄkna"
  ,"jak i nie podzielajÄcy tej wiary"
  ,"a te uniwersalne wartoÅci wywodzÄcy z innych ÅºrÃ³deÅ"
  ,"rÃ³wni w prawach i w powinnoÅciach wobec dobra wspÃ³lnego - Polski"
  ,"wdziÄczni naszym przodkom za ich pracÄ, za walkÄ o niepodlegÅoÅÄ okupionÄ ogromnymi ofiarami, za kulturÄ zakorzenionÄ w chrzeÅcijaÅskim dziedzictwie Narodu i ogÃ³lnoludzkich wartoÅciach"
  ,"nawiÄzujÄc do najlepszych tradycji Pierwszej i Drugiej Rzeczypospolitej"
  ,"zobowiÄzani, by przekazaÄ przyszÅym pokoleniom wszystko, co cenne z ponad tysiÄcletniego dorobku"
  ,"zÅÄczeni wiÄzami wspÃ³lnoty z naszymi rodakami rozsianymi po Åwiecie"
  ,"Åwiadomi potrzeby wspÃ³Åpracy ze wszystkimi krajami dla dobra Rodziny Ludzkiej"
  ,"pomni gorzkich doÅwiadczeÅ z czasÃ³w, gdy podstawowe wolnoÅci i prawa czÅowieka byÅy w naszej OjczyÅºnie Åamane"
  ,"pragnÄc na zawsze zagwarantowaÄ prawa obywatelskie, a dziaÅaniu instytucji publicznych zapewniÄ rzetelnoÅÄ i sprawnoÅÄ"
  ,"w poczuciu odpowiedzialnoÅci przed Bogiem lub przed wÅasnym sumieniem"
  ,"ustanawiamy KonstytucjÄ Rzeczypospolitej Polskiej"
  ,"jako prawa podstawowe dla paÅstwa"
  ,"oparte na poszanowaniu wolnoÅci i sprawiedliwoÅci, wspÃ³ÅdziaÅaniu wÅadz, dialogu spoÅecznym oraz na zasadzie pomocniczoÅci umacniajÄcej uprawnienia obywateli i ich wspÃ³lnot"
  ,"Wszystkich, ktÃ³rzy dla dobra Trzeciej Rzeczypospolitej tÄ KonstytucjÄ bÄdÄ stosowali"
  ,"wzywamy, aby czynili to, dbajÄc o zachowanie przyrodzonej godnoÅci czÅowieka"
  ,"jego prawa do wolnoÅci i obowiÄzku solidarnoÅci z innymi"
  ,"a poszanowanie tych zasad mieli za niewzruszonÄ podstawÄ Rzeczypospolitej Polskiej"];

TrainingDatas["AbÃ¼lski"]=TrainingDatas["SchwyzerdÃ¼tsch"].concat(TrainingDatas["Polish"],TrainingDatas["SchwyzerdÃ¼tsch"]);
//TrainingDatas["SchwyzerdÃ¼tsch"].forEach (function(a){TrainingDatas["AbÃ¼lski"].push(a + " "+ a);TrainingDatas["AbÃ¼lski"].unshift(a)})

//TrainingData['abulia']=TrainingDatas["Polish"]+TrainingDatas["SchwyzerdÃ¼tsch"];
Main.WEBSITE_URL = "http://localhost";
Main.main();
})();
